@startuml ConsoleApplication.CreatePageMenuItems
title ConsoleApplication.CreatePageMenuItems
start
#LightBlue:List<MenuItem> result = new();
if (items.Length > PageSize) then (<color:green>yes)
    #LightBlue:int i = 0;
    while (i < items.Length) is (<color:green>yes)
        #LightBlue:var item = items[i];
        #LightBlue:var menuItem = new MenuItem
                    {
                        IsDisplayed = i >= PageIndex * PageSize && i < (PageIndex + 1) * PageSize,
                        Key = (++mnuIdx).ToString(),
                        OptionalKey = "a", // it's for choose option all
                        Text = string.Empty,
                        Action = (self) =>
                        {
                        },
                    };
        :newMenuItemHandler?.Invoke(item, menuItem);
        :result.Add(menuItem);
    :i++;
    endwhile (<color:red>no)
    #LightBlue:var pageLabel = $"{(PageIndex * PageSize) + 1}..{Math.Min((PageIndex + 1) * PageSize, items.Length)}/{items.Length}";
    :result.Add(CreateMenuSeparator());
    :result.Add(new()
                {
                    Key = "",
                    Text = ToLabelText(pageLabel, string.Empty, 20, ' '),
                    Action = (self) => { },
                    ForegroundColor = ConsoleColor.DarkGreen,
                });
    :result.Add(CreateMenuSeparator());
    :result.Add(new()
                {
                    Key = "+",
                    Text = ToLabelText("Next", "Load next page"),
                    Action = (self) =>
                    {
                        PageIndex = (PageIndex + 1) * PageSize < items.Length ? PageIndex + 1 : PageIndex;
                        PrintScreen();
                    },
                    ForegroundColor = ConsoleColor.DarkGreen,
                });
    :result.Add(new()
                {
                    Key = "-",
                    Text = ToLabelText("Previous", "Load previous page"),
                    Action = (self) =>
                    {
                        PageIndex = Math.Max(0, PageIndex - 1);
                        PrintScreen();
                    },
                    ForegroundColor = ConsoleColor.DarkGreen,
                });
  else (<color:red>no)
      :PageIndex = 0;
      #LightBlue:int i = 0;
      while (i < items.Length) is (<color:green>yes)
          #LightBlue:var item = items[i];
          #LightBlue:var menuItem = new MenuItem
                    {
                        Key = (++mnuIdx).ToString(),
                        OptionalKey = "a", // it's for choose option all
                        Text = string.Empty,
                        Action = (self) =>
                        {
                        },
                    };
          :newMenuItemHandler?.Invoke(item, menuItem);
          :result.Add(menuItem);
      :i++;
      endwhile (<color:red>no)
endif
#Lavender:return result.ToArray();
stop
@enduml
