@startuml ConsoleApplication.CreatePageMenuItems
title ConsoleApplication.CreatePageMenuItems
start
#LightGreen:Params(ref int mnuIdx,T[] items,Action<T, MenuItem> newMenuItemHandler);
#LightSkyBlue:List<MenuItem> result = [];
#LightYellow:if (items.Length > PageSize) then (<color:green>yes)
        #LightSkyBlue:int i = 0;
        while (i < items.Length) is (<color:green>yes)
                #LightSkyBlue:var item = items[i];
                #LightSkyBlue:var menuItem = new MenuItem { IsDisplayed = i >= PageIndex * PageSize && i < (PageIndex + 1) * PageSize, Key = (++mnuIdx).ToString(), OptionalKey = "a", // it's for choose option all Text = string.Empty, Action = (self) => { }, ForegroundColor = i % 2 == 0 ? ForegroundColor : ConsoleColor.DarkYellow, };
                #WhiteSmoke:newMenuItemHandler?.Invoke(item, menuItem);
                #WhiteSmoke:result.Add(menuItem);
        :i++;
        endwhile (<color:red>no)
        #LightSkyBlue:var pageLabel = $"{(PageIndex * PageSize) + 1}..{Math.Min((PageIndex + 1) * PageSize, items.Length)}/{items.Length}";
        #WhiteSmoke:result.Add(CreateMenuSeparator());
        #WhiteSmoke:result.Add(new() { Key = "", Text = ToLabelText(pageLabel, string.Empty, 20, ' '), Action = (self) => { }, ForegroundColor = ConsoleColor.DarkGreen, });
        #WhiteSmoke:result.Add(CreateMenuSeparator());
        #WhiteSmoke:result.Add(new() { Key = "+", Text = ToLabelText("Next", "Load next page"), Action = (self) => { PageIndex = (PageIndex + 1) * PageSize < items.Length ? PageIndex + 1 : PageIndex; PrintScreen(); }, ForegroundColor = ConsoleColor.DarkGreen, });
        #WhiteSmoke:result.Add(new() { Key = "-", Text = ToLabelText("Previous", "Load previous page"), Action = (self) => { PageIndex = Math.Max(0, PageIndex - 1); PrintScreen(); }, ForegroundColor = ConsoleColor.DarkGreen, });
    else (<color:red>no)
            #WhiteSmoke:PageIndex = 0;
            #LightSkyBlue:int i = 0;
            while (i < items.Length) is (<color:green>yes)
                    #LightSkyBlue:var item = items[i];
                    #LightSkyBlue:var menuItem = new MenuItem { Key = (++mnuIdx).ToString(), OptionalKey = "a", // it's for choose option all Text = string.Empty, Action = (self) => { }, };
                    #WhiteSmoke:newMenuItemHandler?.Invoke(item, menuItem);
                    #WhiteSmoke:result.Add(menuItem);
            :i++;
            endwhile (<color:red>no)
endif
#Lavender:return [.. result];
stop
@enduml
