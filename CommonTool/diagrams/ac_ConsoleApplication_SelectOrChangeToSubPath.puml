@startuml ConsoleApplication.SelectOrChangeToSubPath
title ConsoleApplication.SelectOrChangeToSubPath
start
#LightGreen:Params(string currentPath,int maxDepth,params string[] queryPaths);
#LightSkyBlue:var result = currentPath\nvar solutionPath = GetCurrentSolutionPath()\nvar subPaths = new List<string>()\nvar saveForeColor = ForegroundColor;
#WhiteSmoke:queryPaths.ToList().ForEach(qp => TemplatePath.GetSubPaths(qp, maxDepth) .ToList().ForEach(s => subPaths.Add(s)));
#LightYellow:if (subPaths.Contains(solutionPath) == false && solutionPath != currentPath) then (<color:green>yes)
        #WhiteSmoke:subPaths.Add(solutionPath);
endif
#LightSkyBlue:var selectionPaths = subPaths.Distinct().OrderBy(e => e).ToArray();
#LightSkyBlue:int i = 0;
while (i < selectionPaths.Length) is (<color:green>yes)
        #LightYellow:if (i == 0) then (<color:green>yes)
            #WhiteSmoke:PrintLine();
        endif
        #WhiteSmoke:ForegroundColor = i % 2 == 0 ? ConsoleColor.DarkYellow : saveForeColor;
        #WhiteSmoke:PrintLine($"[{i + 1,3}] Change path to: {selectionPaths[i]}");
:i++;
endwhile (<color:red>no)
#WhiteSmoke:ForegroundColor = saveForeColor;
#WhiteSmoke:PrintLine();
#WhiteSmoke:Print("Select or enter target path: ");
#LightSkyBlue:var selectOrPath = ReadLine();
#LightYellow:if (int.TryParse(selectOrPath, out int number)) then (<color:green>yes)
        #LightYellow:if ((number - 1) >= 0 && (number - 1) < selectionPaths.Length) then (<color:green>yes)
                #WhiteSmoke:result = selectionPaths[number - 1];
        endif
    else (<color:red>no)
        #LightYellow:if (string.IsNullOrEmpty(selectOrPath) == false && Directory.Exists(selectOrPath)) then (<color:green>yes)
                #WhiteSmoke:result = selectOrPath;
        endif
endif
#Lavender:return result;
stop
@enduml
