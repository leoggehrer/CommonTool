@startuml StringExtensions.GetAllTags
title StringExtensions.GetAllTags
start
#LightGreen:Params(this string text,string startTag,string endTag,int parseIndex,params char[] excludeBlocks);
#LightSkyBlue:int startTagIndex\nint endTagIndex\nvar result = new List<T>()\nvar tagHeader = new TagInfo.TagHeader(text);
repeat
        #WhiteSmoke:startTagIndex = text.IndexOf(startTag, parseIndex, StringComparison.CurrentCultureIgnoreCase);
        #LightSkyBlue:var startTagEndIndex = startTagIndex > -1 ? startTagIndex + startTag.Length : parseIndex;
        #WhiteSmoke:endTagIndex = startTagEndIndex >= 0 ? text.IndexOf(endTag, startTagEndIndex, StringComparison.CurrentCultureIgnoreCase) : -1;
        #LightYellow:if (startTagIndex > -1 && endTagIndex > startTagIndex) then (<color:green>yes)
                #LightSkyBlue:int idx = startTagEndIndex;
                #LightSkyBlue:int endTagSearchPosAt = startTagEndIndex;
                #LightSkyBlue:var blockCounter = new int[excludeBlocks.Length];
                while (idx < endTagIndex) is (<color:green>yes)
                        #LightSkyBlue:int j = 0;
                        while (j < blockCounter.Length) is (<color:green>yes)
                                #LightYellow:if (text[idx] == excludeBlocks[j]) then (<color:green>yes)
                                        #WhiteSmoke:endTagSearchPosAt = idx;
                                        #WhiteSmoke:blockCounter[j] += j % 2 == 0 ? 1 : -1;
                                endif
                        :j++;
                        endwhile (<color:red>no)
                        #WhiteSmoke:idx++;
                endwhile (<color:red>no)
                while (idx < text.Length && blockCounter.Sum() != 0) is (<color:green>yes)
                        #LightSkyBlue:int j = 0;
                        while (j < blockCounter.Length) is (<color:green>yes)
                                #LightYellow:if (text[idx] == excludeBlocks[j]) then (<color:green>yes)
                                        #WhiteSmoke:endTagSearchPosAt = idx;
                                        #WhiteSmoke:blockCounter[j] += j % 2 == 0 ? 1 : -1;
                                endif
                        :j++;
                        endwhile (<color:red>no)
                        #WhiteSmoke:idx++;
                endwhile (<color:red>no)
                #LightYellow:if (endTagSearchPosAt > endTagIndex && blockCounter.Sum() == 0) then (<color:green>yes)
                        #WhiteSmoke:endTagIndex = text.IndexOf(endTag, endTagSearchPosAt, StringComparison.CurrentCultureIgnoreCase);
                endif
        endif
        #LightYellow:if (startTagIndex > -1 && endTagIndex > startTagIndex) then (<color:green>yes)
                #WhiteSmoke:result.Add(new T { Header = tagHeader, StartTag = startTag, StartTagIndex = startTagIndex, EndTag = endTag, EndTagIndex = endTagIndex, });
                #WhiteSmoke:parseIndex = startTagEndIndex;
        endif
repeat while (startTagIndex > -1 && endTagIndex > -1) is (<color:green>yes)
#Lavender:return result;
stop
@enduml
