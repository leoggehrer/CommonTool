@startuml StringExtensions.ReplaceAll
title StringExtensions.ReplaceAll
start
#LightGreen:Params(this string text,string startTag,string endTag,Func<string, string> replace);
#LightSkyBlue:int parseIndex = 0\nint startTagIndex\nint endTagIndex\nStringBuilder result = new();
repeat
        #WhiteSmoke:startTagIndex = text.IndexOf(startTag, parseIndex, StringComparison.CurrentCultureIgnoreCase);
        #LightSkyBlue:int startTagEndIndex = startTagIndex > -1 ? startTagIndex + startTag.Length : parseIndex;
        #WhiteSmoke:endTagIndex = startTagEndIndex >= 0 ? text.IndexOf(endTag, startTagEndIndex, StringComparison.CurrentCultureIgnoreCase) : -1;
        #LightSkyBlue:int endTagEndIndex = endTagIndex > -1 ? endTagIndex + endTag.Length : parseIndex;
        #LightYellow:if (startTagIndex > -1 && endTagIndex > startTagIndex) then (<color:green>yes)
                #LightSkyBlue:string substr = text.Substring(startTagIndex, endTagIndex - startTagIndex + endTag.Length);
                #WhiteSmoke:result.Append(text[parseIndex..startTagIndex]);
                #LightYellow:if (replace != null) then (<color:green>yes)
                        #WhiteSmoke:result.Append(replace(substr));
                endif
                #WhiteSmoke:parseIndex = endTagEndIndex;
        endif
repeat while (startTagIndex > -1 && endTagIndex > -1) is (<color:green>yes)
#LightYellow:if (parseIndex < text.Length) then (<color:green>yes)
        #WhiteSmoke:result.Append(text[parseIndex..]);
endif
#Lavender:return result.ToString();
stop
@enduml
