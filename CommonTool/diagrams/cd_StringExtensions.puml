@startuml StringExtensions
title StringExtensions
 class StringExtensions << static >> #GhostWhite {
- {static} string _separator
- {static} string _indentspace
- {static} string _nulltext
---
+ {static} string getSeparator()
+ {static} Void setSeparator(string value)
+ {static} string getIndentSpace()
+ {static} Void setIndentSpace(string value)
+ {static} string getNullText()
+ {static} Void setNullText(string value)
---
+ {static} void CheckNotNullOrEmpty(string? source, string argName)
+ {static} string CuttingOut(string source, int startIdx)
+ {static} string CuttingOut(string source, int startIdx, int endIdx)
+ {static} string Substring(string source, int index, string text)
+ {static} string ExtractBetween(string source, string startText, string endText)
+ {static} string ExtractBetween(string source, char openingBracket, char closingBracket)
+ {static} string ExtractBetween(string source, char openingBracket, char closingBracket, int startPosition)
+ {static} string ReplaceBetween(string source, string startText, string endText, string replaceText)
+ {static} bool TryParse(string value, Type type, object? typeValue)
+ {static} bool ContainsIgnoreCase(string source, string toCheck)
+ {static} bool Contains(string source, string[] toChecks)
+ {static} bool Contains(string source, StringComparison comparison, string[] toChecks)
+ {static} bool Contains(string source, char toCheck, char quotationStart, char quotationEnd)
+ {static} bool Contains(string source, char toCheck, char[] quotationStarts, char[] quotationEnds)
+ {static} IEnumerable<string[]> Split(IEnumerable<string> source, string separator)
+ {static} IEnumerable<T> SplitAndMap(IEnumerable<string> source, string separator, Func<string[], T> mapper)
+ {static} IEnumerable<T> SplitAndMap(IEnumerable<string> source, string separator, Func<string[], string[], T> mapper)
+ {static} string GetValue(string source, string defaultValue)
+ {static} IEnumerable<DivideInfo> Divide(string text, string[] tags)
+ {static} IEnumerable<TagInfo> GetAllTags(string text, string[] tags)
+ {static} IEnumerable<TagInfo> GetAllTags(string text, string startTag, string endTag)
+ {static} IEnumerable<TagInfo> GetAllTags(string text, string startTag, string endTag, int parseIndex)
+ {static} IEnumerable<TagInfo> GetAllTags(string text, string startTag, string endTag, int parseIndex, char[] excludeBlocks)
+ {static} IEnumerable<T> GetAllTags(string text, string startTag, string endTag, int parseIndex, char[] excludeBlocks)
+ {static} bool InRange(string source, int index)
+ {static} bool IsNullOrEmpty(string? text)
+ {static} bool IsNullOrWhiteSpace(string text)
+ {static} bool HasContent(string? source)
+ {static} bool NotEquals(string source, string value)
+ {static} bool AreEquals(string source, string value)
+ {static} bool AreEquals(string source, string value, StringComparison stringComparison)
+ {static} string GetValueOrDefault(string text)
+ {static} string GetValueOrDefault(string text, string defaultValue)
+ {static} string SetIndent(string text)
+ {static} string SetIndent(string text, int count)
+ {static} string SetIndent(string text, string indentSpace, int count)
+ {static} string[] SetIndent(string[] lines, int count)
+ {static} IEnumerable<string> SetIndent(IEnumerable<string> lines, int count)
+ {static} string ToText(IEnumerable<string> lines)
+ {static} string ToText(IEnumerable<string> lines, Func<string, string> lineConvert)
+ {static} IEnumerable<string> ToLines(string text)
+ {static} IEnumerable<string?> Trim(IEnumerable<string> source)
+ {static} string Partialstring(string text, string from, string to)
+ {static} string Partialstring(string text, int from, int to)
+ {static} string Betweenstring(string text, string from, string to)
+ {static} string Remove(string text, string startTag, string endTag)
+ {static} string ReplaceUmlauts(string text)
+ {static} string ReplaceAll(string text, TagInfo tagInfo, Func<string, string> replace)
+ {static} string ReplaceAll(string text, string startTag, string endTag, string replaceText)
+ {static} string ReplaceAll(string text, string startTag, string endTag, Func<string, string> replace)
+ {static} string RemoveAll(string source)
+ {static} string RemoveAll(string source, string[] removeItems)
+ {static} int ToInt(string text)
+ {static} long ToLong(string text)
+ {static} string ToFileName(string text)
+ {static} IEnumerable<T?> ToEnumerable(string source, string separator)
+ {static} byte[] ToByteArray(string source)
+ {static} string Encrypt(string text, string keyString)
+ {static} string Decrypt(string cipherText, string keyString)
- {static} bool IsWord(string text)
+ {static} string CreatePluralWord(string wordInSingular)
+ {static} string Shrink(string source, char charToRemove)
}
@enduml
