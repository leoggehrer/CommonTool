@startuml ConsoleApplication.SelectOrChangeToSubPath
title ConsoleApplication.SelectOrChangeToSubPath
participant "SelectOrChangeToSubPath(string currentPath,int maxDepth,params string[] queryPaths)" as SelectOrChangeToSubPath_p0_p1_p2 #LightYellow
participant "GetCurrentSolutionPath()" as GetCurrentSolutionPath #LightGreen
participant "queryPaths.ToList().ForEach(a0)" as queryPaths_ToList_ForEach_a0 #LightGreen
participant "queryPaths.ToList()" as queryPaths_ToList #LightGreen
participant "subPaths.Add(a0)" as subPaths_Add_a0 #LightGreen
participant "subPaths.Contains(a0)" as subPaths_Contains_a0 #LightGreen
participant "subPaths.Distinct().OrderBy(e=>e).ToArray()" as subPaths_Distinct_OrderBy_e_e_ToArray #LightGreen
participant "subPaths.Distinct()" as subPaths_Distinct #LightGreen
participant "PrintLine()" as PrintLine #LightGreen
participant "PrintLine(a0)" as PrintLine_a0 #LightGreen
participant "Print(a0)" as Print_a0 #LightGreen
participant "ReadLine()" as ReadLine #LightGreen
participant "int.TryParse(a0,a1)" as int_TryParse_a0_a1 #LightGreen
participant "string.IsNullOrEmpty(a0)" as string_IsNullOrEmpty_a0 #LightGreen
participant "Directory.Exists(a0)" as Directory_Exists_a0 #LightGreen
autonumber
SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> GetCurrentSolutionPath
GetCurrentSolutionPath -[#blue]-> SelectOrChangeToSubPath_p0_p1_p2 : solutionPath
SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> queryPaths_ToList_ForEach_a0 : (qp => TemplatePath.GetSubPaths(qp, maxDepth)
                      .ToList().ForEach(s => subPaths.Add(s)))
alt#LightBlue subPaths.Contains(solutionPath) == false && solutionPath != currentPath
    SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> subPaths_Contains_a0 : (solutionPath)
    SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> subPaths_Add_a0 : (solutionPath)
end
SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> subPaths_Distinct_OrderBy_e_e_ToArray
subPaths_Distinct_OrderBy_e_e_ToArray -[#blue]-> SelectOrChangeToSubPath_p0_p1_p2 : selectionPaths
loop#LightCoral i < selectionPaths.Length
    alt#LightBlue i == 0
        SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> PrintLine
    end
    SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> PrintLine_a0 : ($"[{i + 1,3}] Change path to: {selectionPaths[i]}")
    PrintLine_a0 -[#blue]-> SelectOrChangeToSubPath_p0_p1_p2 : result
end
SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> PrintLine
SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> Print_a0 : ("Select or enter target path: ")
Print_a0 -[#blue]-> SelectOrChangeToSubPath_p0_p1_p2 : result
SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> ReadLine
ReadLine -[#blue]-> SelectOrChangeToSubPath_p0_p1_p2 : selectOrPath
alt#LightBlue int.TryParse(selectOrPath, out int number)
    SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> int_TryParse_a0_a1 : (selectOrPath, out int number)
    int_TryParse_a0_a1 -[#blue]-> SelectOrChangeToSubPath_p0_p1_p2 : result
    else
        alt#LightBlue string.IsNullOrEmpty(selectOrPath) == false
                     && Directory.Exists(selectOrPath)
            SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> string_IsNullOrEmpty_a0 : (selectOrPath)
            string_IsNullOrEmpty_a0 -[#blue]-> SelectOrChangeToSubPath_p0_p1_p2 : result
            SelectOrChangeToSubPath_p0_p1_p2 -[#grey]> Directory_Exists_a0 : (selectOrPath)
        end
end
@enduml
